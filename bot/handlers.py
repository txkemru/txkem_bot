from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from bot.texts import *
from bot.config import ADMIN_ID
from bot.states import OrderStates

router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üìå –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton(text="üíº –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton(text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", callback_data="resources")],
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data="contact")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def get_back_keyboard() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û–±–æ –º–Ω–µ" —Å –∫–Ω–æ–ø–∫–æ–π Telegraph
def get_about_me_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üìé –ú–æ–π Telegraph", url="https://telegra.ph/DEV-06-22-9")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª—É–≥
def get_services_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="ü§ñ –ß–∞—Ç-–±–æ—Ç—ã", callback_data="service_telegram_bot")],
        [InlineKeyboardButton(text="üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data="service_web_app")],
        [InlineKeyboardButton(text="üì± Telegram Mini App", callback_data="service_mini_app")],
        [InlineKeyboardButton(text="üß† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI", callback_data="service_ai")],
        [InlineKeyboardButton(text="‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", callback_data="service_automation")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞
def get_order_start_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="order_start")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="services")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def get_order_confirm_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="order_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="order_restart")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
def get_resources_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üîí –†–∞–±–æ—á–∏–µ VPN", callback_data="vpn_resources")],
        [InlineKeyboardButton(text="ü§ñ AI –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="ai_resources")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è VPN —Ä–µ—Å—É—Ä—Å–æ–≤
def get_vpn_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="hitVPNüî•", url="https://t.me/hitvpnbot?start=1332650143334401")],
        [InlineKeyboardButton(text="f3VPN (–Ω–µ—Ç –≤ —Ä—É—Å—Å–∫–æ–º AppStore)", url="https://tinyurl.com/y4eaf46n")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—É—Ä—Å–∞–º", callback_data="resources")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è AI —Ä–µ—Å—É—Ä—Å–æ–≤
def get_ai_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="OpenAI", url="https://platform.openai.com")],
        [InlineKeyboardButton(text="Claude", url="https://claude.ai")],
        [InlineKeyboardButton(text="Perplexity", url="https://perplexity.ai")],
        [InlineKeyboardButton(text="Midjourney", url="https://midjourney.com")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—É—Ä—Å–∞–º", callback_data="resources")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Å–ª—É–≥
SERVICE_NAMES = {
    "telegram_bot": "–ß–∞—Ç-–±–æ—Ç—ã",
    "web_app": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
    "mini_app": "Telegram Mini App",
    "ai": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI",
    "automation": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        MAIN_MENU_TEXT,
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        MAIN_MENU_TEXT,
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–æ –º–Ω–µ"
@router.callback_query(F.data == "about_me")
async def about_me_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        ABOUT_ME_TEXT,
        reply_markup=get_about_me_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–£—Å–ª—É–≥–∏"
@router.callback_query(F.data == "services")
async def services_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        SERVICES_TEXT,
        reply_markup=get_services_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ª—É–≥
@router.callback_query(F.data == "service_telegram_bot")
async def telegram_bot_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(service="telegram_bot")
    await callback.message.edit_text(
        TELEGRAM_BOT_TEXT,
        reply_markup=get_order_start_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "service_web_app")
async def web_app_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(service="web_app")
    await callback.message.edit_text(
        WEB_APP_TEXT,
        reply_markup=get_order_start_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "service_mini_app")
async def mini_app_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(service="mini_app")
    await callback.message.edit_text(
        TELEGRAM_MINI_APP_TEXT,
        reply_markup=get_order_start_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "service_ai")
async def ai_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(service="ai")
    await callback.message.edit_text(
        AI_INTEGRATION_TEXT,
        reply_markup=get_order_start_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "service_automation")
async def automation_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(service="automation")
    await callback.message.edit_text(
        AUTOMATION_TEXT,
        reply_markup=get_order_start_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "order_start")
async def order_start_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_name = SERVICE_NAMES.get(data.get("service", ""), "–£—Å–ª—É–≥–∞")
    
    await state.set_state(OrderStates.business)
    await callback.message.edit_text(
        ORDER_QUESTIONS["business"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "order_cancel")
async def order_cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        ORDER_CANCEL_TEXT,
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "order_restart")
async def order_restart_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_name = SERVICE_NAMES.get(data.get("service", ""), "–£—Å–ª—É–≥–∞")
    
    await state.set_state(OrderStates.business)
    await callback.message.edit_text(
        ORDER_QUESTIONS["business"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]
        ])
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@router.message(OrderStates.business)
async def business_handler(message: Message, state: FSMContext):
    await state.update_data(business=message.text)
    await state.set_state(OrderStates.task)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    await message.answer(
        ORDER_QUESTIONS["task"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]
        ])
    )

@router.message(OrderStates.task)
async def task_handler(message: Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(OrderStates.features)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    await message.answer(
        ORDER_QUESTIONS["features"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]
        ])
    )

@router.message(OrderStates.features)
async def features_handler(message: Message, state: FSMContext):
    await state.update_data(features=message.text)
    await state.set_state(OrderStates.deadline)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    await message.answer(
        ORDER_QUESTIONS["deadline"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]
        ])
    )

@router.message(OrderStates.deadline)
async def deadline_handler(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(OrderStates.confirmation)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    service_name = SERVICE_NAMES.get(data.get("service", ""), "–£—Å–ª—É–≥–∞")
    
    summary_text = ORDER_SUMMARY_TEXT.format(
        service=service_name,
        business=data.get("business", ""),
        task=data.get("task", ""),
        features=data.get("features", ""),
        deadline=data.get("deadline", "")
    )
    
    await message.answer(
        summary_text,
        reply_markup=get_order_confirm_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "order_send")
async def order_send_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_name = SERVICE_NAMES.get(data.get("service", ""), "–£—Å–ª—É–≥–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    username = callback.from_user.username or "–±–µ–∑ username"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        ORDER_CONFIRMATION_TEXT.format(service=service_name),
        reply_markup=get_back_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
    admin_message = ADMIN_NEW_ORDER_TEXT.format(
        user_name=user_name,
        username=username,
        user_id=user_id,
        service=service_name,
        date=current_date,
        business=data.get("business", ""),
        task=data.get("task", ""),
        features=data.get("features", ""),
        deadline=data.get("deadline", "")
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        bot = callback.bot
        await bot.send_message(ADMIN_ID, admin_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
@router.callback_query(F.data == "resources")
async def resources_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        RESOURCES_TEXT,
        reply_markup=get_resources_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ VPN —Ä–µ—Å—É—Ä—Å–æ–≤
@router.callback_query(F.data == "vpn_resources")
async def vpn_resources_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        VPN_RESOURCES_TEXT,
        reply_markup=get_vpn_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI —Ä–µ—Å—É—Ä—Å–æ–≤
@router.callback_query(F.data == "ai_resources")
async def ai_resources_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        AI_RESOURCES_TEXT,
        reply_markup=get_ai_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ù–∞–ø–∏—Å–∞—Ç—å"
@router.callback_query(F.data == "contact")
async def contact_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        CONTACT_TEXT,
        reply_markup=get_back_keyboard()
    )
    await callback.answer() 